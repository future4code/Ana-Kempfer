{"ast":null,"code":"import _toConsumableArray from \"/home/skempfer/\\xC1rea de Trabalho/Ana-Kempfer/semana12/planner-boilerplate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar initialState = {\n  allTasks: []\n};\n\nvar tasks = function tasks() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"CREATE_TASK\":\n      var newT = {\n        id: Date.now(),\n        text: action.payload.text,\n        completed: false\n      };\n      return {\n        allTodos: [].concat(_toConsumableArray(state.allTodos), [newTodo])\n      };\n    //   case \"COMPLETE_TODO\": {\n    //     const newTodos = [...state.allTodos];\n    //     const { todoId } = action.payload;\n    //     const indexToChange = newTodos.findIndex(todo => todo.id === todoId);\n    //     newTodos[indexToChange].completed = !newTodos[indexToChange].completed;\n    //     return { ...state, allTodos: newTodos };\n    //   }\n\n    default:\n      return state;\n  }\n};\n\nexport default tasks;","map":{"version":3,"sources":["/home/skempfer/Área de Trabalho/Ana-Kempfer/semana12/planner-boilerplate/src/reducers/tasks.js"],"names":["initialState","allTasks","tasks","state","action","type","newT","id","Date","now","text","payload","completed","allTodos","newTodo"],"mappings":";AAAA,IAAMA,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAE;AADO,CAArB;;AAIE,IAAMC,KAAK,GAAG,SAARA,KAAQ,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBH,YAAyB;AAAA,MAAXI,MAAW;;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,aAAL;AACE,UAAMC,IAAI,GAAG;AACXC,QAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL,EADO;AAEXC,QAAAA,IAAI,EAAEN,MAAM,CAACO,OAAP,CAAeD,IAFV;AAGXE,QAAAA,SAAS,EAAE;AAHA,OAAb;AAKA,aAAO;AAAEC,QAAAA,QAAQ,+BAAMV,KAAK,CAACU,QAAZ,IAAsBC,OAAtB;AAAV,OAAP;AAEJ;AACA;AACA;AAEA;AACA;AAEA;AACA;;AAEA;AACI,aAAOX,KAAP;AApBJ;AAsBD,CAvBD;;AAyBA,eAAeD,KAAf","sourcesContent":["const initialState = {\n    allTasks: []\n  };\n  \n  const tasks = (state = initialState, action) => {\n    switch (action.type) {\n      case \"CREATE_TASK\":\n        const newT = {\n          id: Date.now(),\n          text: action.payload.text,\n          completed: false\n        };\n        return { allTodos: [...state.allTodos, newTodo] };\n  \n    //   case \"COMPLETE_TODO\": {\n    //     const newTodos = [...state.allTodos];\n    //     const { todoId } = action.payload;\n  \n    //     const indexToChange = newTodos.findIndex(todo => todo.id === todoId);\n    //     newTodos[indexToChange].completed = !newTodos[indexToChange].completed;\n  \n    //     return { ...state, allTodos: newTodos };\n    //   }\n       \n    default:\n        return state;\n    }\n  };\n  \n  export default tasks;"]},"metadata":{},"sourceType":"module"}